"use strict";(self.webpackChunkblur_engine_lua_docs=self.webpackChunkblur_engine_lua_docs||[]).push([[9218],{4839:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var s=o(4848),t=o(8453);const a={},r="Console Commands",l={id:"tutorials/console-commands",title:"Console Commands",description:"Making a new console command is quite simple and there are only really three steps to the process.",source:"@site/docs/tutorials/console-commands.md",sourceDirName:"tutorials",slug:"/tutorials/console-commands",permalink:"/blurengine-docs/docs/tutorials/console-commands",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/blurengine-docs/docs/tutorial_index"},next:{title:"Basic Events",permalink:"/blurengine-docs/docs/tutorials/event-basics"}},c={},i=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"console-commands",children:"Console Commands"}),"\n",(0,s.jsx)(n.p,{children:"Making a new console command is quite simple and there are only really three steps to the process."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Make a new ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/classes/class_Command",children:"Command"})," instance"]}),"\n",(0,s.jsx)(n.li,{children:"Link with the execute event."}),"\n",(0,s.jsxs)(n.li,{children:["Register the command using ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/libraries/library_Console",children:"Console.registerCommand"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In order to make a new command, you have to call the constructor: ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/classes/class_Command",children:"Command.new"})," instance with the name and rule arguments.\nThe name is the string that will be used to match and execute your command. The built-in lua command's name is ",(0,s.jsx)(n.code,{children:'"lua"'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/classes/class_Command",children:"Command"}),"'s ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/enums/enum_CommandRule",children:"CommandRule"})," determines how the user input will be parsed before being handed off to your command."]}),"\n",(0,s.jsxs)(n.p,{children:["A rule of RULE_SINGLE_PARAMETER will give you a single parameter in the list that corresponds to all of the user's input after the command name. So if the user input ",(0,s.jsx)(n.code,{children:"your_command Hello World!"})," into the console, your command would receive a single parameter: ",(0,s.jsx)(n.code,{children:'"Hello World!"'})]}),"\n",(0,s.jsxs)(n.p,{children:["A rule of RULE_SPLIT_WORDS would pass that same input to your ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/classes/class_Command",children:"Command"})," instance as two separate parameters: ",(0,s.jsx)(n.code,{children:'"Hello", "World!"'})]}),"\n",(0,s.jsx)(n.p,{children:"So, in order to create a command all you need to write is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="scripts/script.lua"',children:'local command = Command.new("new_command", RULE_SINGLE_PARAMETER)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In order to write your own functionality, all you have to do is link your function with the ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/classes/class_Command",children:"Command.execute"})," event like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="scripts/script.lua"',children:'local command = Command.new("new_command", RULE_SINGLE_PARAMETER)\n\nfunction command:execute(context, arguments)\n    print(arguments[1])\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["All that's left is to register the command with the console with ",(0,s.jsx)(n.a,{href:"/blurengine-docs/docs/api/libraries/library_Console",children:"Console.registerCommand"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="scripts/script.lua"',children:'local command = Command.new("new_command", RULE_SINGLE_PARAMETER)\n\nfunction command:execute(context, arguments)\n    context:writeLine(arguments[1])\nend\n\nConsole.registerCommand(command)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For example, when the user calls ",(0,s.jsx)(n.code,{children:"new_command Hello World!"})," you can expect ",(0,s.jsx)(n.code,{children:"Hello World!"})," to show up in your console."]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var s=o(6540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);