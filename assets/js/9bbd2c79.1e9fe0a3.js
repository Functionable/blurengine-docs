"use strict";(self.webpackChunkblur_engine_lua_docs=self.webpackChunkblur_engine_lua_docs||[]).push([[1141],{8852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=n(4848),o=n(8453);const s={},a="Intro to BLF",r={id:"tutorials/intro-to-blf",title:"Intro to BLF",description:"BlurEngine currently is using BLF 1.1 but BLF 2.0 is very far along in development. Major changes are expected.",source:"@site/docs/tutorials/intro-to-blf.md",sourceDirName:"tutorials",slug:"/tutorials/intro-to-blf",permalink:"/blurengine-docs/docs/tutorials/intro-to-blf",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GUI Basics",permalink:"/blurengine-docs/docs/tutorials/gui-basics"}},l={},d=[{value:"Loading data with BLF",id:"loading-data-with-blf",level:2},{value:"Making your own object defintions",id:"making-your-own-object-defintions",level:2},{value:"Easy object definitions",id:"easy-object-definitions",level:2},{value:"Writing a BLF file",id:"writing-a-blf-file",level:2},{value:"Next steps",id:"next-steps",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"intro-to-blf",children:"Intro to BLF"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"BlurEngine currently is using BLF 1.1 but BLF 2.0 is very far along in development. Major changes are expected.\nThe update may break compatibility with older BLF 1.1 files."})}),"\n",(0,i.jsx)(t.p,{children:"BLF, or Blur Level Format, is a binary format to which you can serialize data from Lua."}),"\n",(0,i.jsxs)(t.p,{children:["If you're looking to write your own level editor, perhaps first consider using the ",(0,i.jsx)(t.a,{href:"https://github.com/Kippye/blue",children:"blue level editor"})," by Kip."]}),"\n",(0,i.jsx)(t.p,{children:"BLF revolves around storing many instances of an Object, which makes it perfect for storing game level data.\nIt requires that all types of objects written be defined. Each object must have a definition written for it."}),"\n",(0,i.jsx)(t.h2,{id:"loading-data-with-blf",children:"Loading data with BLF"}),"\n",(0,i.jsxs)(t.p,{children:["You have to make use of the ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/libraries/library_BLF",children:"BLF.load()"})," function."]}),"\n",(0,i.jsxs)(t.p,{children:["The following script will read data from a BLF file and store it as a lua table, ",(0,i.jsx)(t.code,{children:"data"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"It is important to note that all object attribute data will be stored under the attribute names."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",metastring:'title="scripts/script.lua"',children:'local data = BLF.load("saves/data.blf")\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Why isn't an object definition needed here?"})}),"\n",(0,i.jsx)(t.p,{children:"While the underlying BLF library itself does require definitions for reading data, this is abstracted away for the Lua API. All the data stored in the file is then placed inside of a Lua table in the same order it was found in the file by the BLF reader."}),"\n",(0,i.jsx)(t.h2,{id:"making-your-own-object-defintions",children:"Making your own object defintions"}),"\n",(0,i.jsx)(t.p,{children:"An object definition is a complex table describing the layout of the object you're planning to write."}),"\n",(0,i.jsx)(t.p,{children:"BLF refers to members within an object described by an object definition as attributes."}),"\n",(0,i.jsx)(t.p,{children:"The definition has two important members in the table:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"__blfName"})," which is the name of the object, this name should be kept unique between other definitions."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"__blfAttributes"})," is a table that acts as a list of the objects that describe all the relevant attributes in the object, their type, and how to exactly access them."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Each attribute is a list that contains elements at indexes 1-3:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"The object name as is written to the BLF file's object table (this doesn't have to match the key of the attribute within the object). This should be a string."}),"\n",(0,i.jsxs)(t.li,{children:["The type of the attribute. (for example: ",(0,i.jsx)(t.code,{children:"BLF_INT"})," or ",(0,i.jsx)(t.code,{children:"BLF_STRING"}),") This should be a ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/enums/enum_BLF",children:"BLF"})," enum."]}),"\n",(0,i.jsx)(t.li,{children:"The way this attribute is accessed. This has to be a table."}),"\n"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["At the first index of the table either ",(0,i.jsx)(t.code,{children:"BLF_ACCESSPROPERTY"})," or ",(0,i.jsx)(t.code,{children:"BLF_ACCESSFUNCTION"})," is expected."]}),"\n",(0,i.jsxs)(t.li,{children:["At the second index of the table, a string is expected.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If index 1 is ",(0,i.jsx)(t.code,{children:"BLF_ACCESSPROPERTY"})," then it is expected to be the key of the attribute in the object."]}),"\n",(0,i.jsxs)(t.li,{children:["If index 1 is ",(0,i.jsx)(t.code,{children:"BLF_ACCESSFUNCTION"})," then the string must be a key to the getter function retrieving the attribute's value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["You may want to consult with the ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/enums/enum_BLF",children:"BLF"})," and ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/enums/enum_BLF%20Property%20Type",children:"BLF property type"})," enums while making your ",(0,i.jsx)(t.code,{children:"__blfAttributes"})," table."]}),"\n",(0,i.jsx)(t.p,{children:"Below is an example object and its corresponding definition."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'local object = {\n    ["important_variable"] = 3,\n    ["a_string"] = "Hello World",\n    ["X"] = 2,\n    ["Y"] = 5,\n    ["Z"] = 2.8\n}\n\nlocal definition = {\n    __blfName = "object",\n\n    __blfAttributes = {\n        {"important_variable", BLF_INT, {BLF_ACCESSPROPERTY, "important_variable"}},\n        {"a_string", BLF_STRING, {BLF_ACCESSPROPERTY, "a_string"}},\n        {"x", BLF_FLOAT, {BLF_ACCESSPROPERTY, "X"}},\n        {"y", BLF_FLOAT, {BLF_ACCESSPROPERTY, "Y"}},\n        {"z", BLF_FLOAT, {BLF_ACCESSPROPERTY, "Z"}}\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"easy-object-definitions",children:"Easy object definitions"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["BLF 1.1 does not support storing objects within objects (so you can't store a vector within a bigger object). Such objects will be ignored by ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/libraries/library_BLF",children:"BLF.generate()"})]})}),"\n",(0,i.jsx)(t.p,{children:"Let's take this object as an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'local object = {\n    ["important_variable"] = 3,\n    ["a_string"] = "Hello World",\n    ["X"] = 2,\n    ["Y"] = 5,\n    ["Z"] = 2.8\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Let's say we've got multiple objects that all contain these fields with different values, and we want to save them to a file."}),"\n",(0,i.jsxs)(t.p,{children:["We could generate a definition for all them using the ",(0,i.jsx)(t.code,{children:"object"})," we just made."]}),"\n",(0,i.jsxs)(t.p,{children:["It is important to note that every field (that is supported by BLF) will be scanned by ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/libraries/library_BLF",children:"BLF.generate()"})," and put in the definition. This method may not be suitable for you if you have fields you do not want to serialize to the file."]}),"\n",(0,i.jsxs)(t.p,{children:["All you need to do to make a definition from ",(0,i.jsx)(t.code,{children:"object"})," is this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"local definition = BLF.generate(object)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The only thing you may want to change is the definition's ",(0,i.jsx)(t.code,{children:"__blfName"})," field as that field contains the definition's name to be descriptive of the object you're storing, for example ",(0,i.jsx)(t.code,{children:'"Tile"'}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"writing-a-blf-file",children:"Writing a BLF file"}),"\n",(0,i.jsx)(t.p,{children:"So you've got objects you want to save to a BLF file and you've made definitions for them. The next step is to attach the definitions to them."}),"\n",(0,i.jsxs)(t.p,{children:["In order to do that, you're going to have to set each object's ",(0,i.jsx)(t.code,{children:"__blfDefinition"})," field to be the object definition table you made/generated that corresponds to that object."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, if you've got a table of objects of the same type named ",(0,i.jsx)(t.code,{children:"all_objects"})," and a definition for them: ",(0,i.jsx)(t.code,{children:"object_definition"})," then you could implement this loop:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"for k, v in pairs(all_objects) do\n    v.__blfDefinition = object_definition\nend\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Next, add all of the objects you're going to write to the file into a single list. We're going to call it ",(0,i.jsx)(t.code,{children:"write_objects"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, you can use ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/libraries/library_BLF",children:"BLF.save()"})," to finally write the file like so:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'BLF.save("your_file_name.blf", write_objects)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The library will then save the file to ",(0,i.jsx)(t.code,{children:"saves/your_file_name.blf"})]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsx)(t.p,{children:"The BLF library is a bit complex for what it does. However, the speed benefit hopefully outweighs the need for the use of solutions such as serializing your data via a Lua json library."}),"\n",(0,i.jsxs)(t.p,{children:["Take a look at the ",(0,i.jsx)(t.a,{href:"/blurengine-docs/docs/api/libraries/library_BLF",children:"BLF"})," library for more functions that may be of utility to you."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);